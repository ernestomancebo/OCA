Twist in the Tale 1.1

// Contents of Multiple.java
public interface Printable {
//.. we are not detailing this part
}
interface Movable {
//.. we are not detailing this part
}

Options: 
	a A Java source code file cannot define multiple interfaces.
	b A Java source code file can only define multiple classes.
* 	c A Java source code file can define multiple interfaces and classes.
* 	d The previous class will fail to compile

Twist in the Tale 1.2

// contents of Multiple2.java
interface Printable {
//.. we are not detailing this part
}
class MyClass {
//.. we are not detailing this part
}
interface Movable {
//.. we are not detailing this part
}
public class Car {
//.. we are not detailing this part
}
public interface Multiple2 {}

Options:
*	a The code fails to compile.
	b The code compiles successfully.
*	c Removing the definition of class Car will compile the code.
*	d Changing class Car to a non-public class will compile the code.
	e Changing class Multiple2 to a non-public class will compile the code.

Twist in the Tale 1.3

Executing "java EJava java one one", the output: "java one"


*	a 	class EJava {
		public static void main(String sun[]) {
		System.out.println(sun[0] + " " + sun[2]);
		}
		}
*	b 	class EJava {
		static public void main(String phone[]) {
		System.out.println(phone[0] + " " + phone[1]);
		}
		}
	c 	class EJava {
		static public void main(String[] arguments[]) {		
		System.out.println(arguments[0] + " " + arguments[1]);
		}
		}
	d 	class EJava {
		static void public main(String args[]) {
		System.out.println(args[0] + " " + args[1]);
		}
		}

Twist in the Tale 1.4

How can you declare a class Curtainin a package building so that it isn’t visible outside the package building?

	package building;
	public class Curtain {}

	package building;
	protected class Curtain {}

*	package building;
	class Curtain {}

	An protected can be extended from other packages

*	package building;
	private class Curtain {}

	private no one can see it..

Twist in the Tale 2.1

Determine the output of the following code:
	class TwistInTaleNumberSystems {
		public static void main (String args[]) {
			int baseDecimal = 267;
			int octVal = 0413;
			int hexVal = 0x10B;
			int binVal = 0b100001011;
			System.out.println (baseDecimal + octVal);
			System.out.println (hexVal + binVal);
		}
	}

// 534, ambos

Determine which of these does this job correctly:
	long var1 = 0_100_267_760;
	long var2 = 0_x_4_13;
	long var3 = 0b_x10_BA_75;
	long var4 = 0b_10000_10_11;
*	long var5 = 0xa10_AG_75;
*	long var6 = 0x1_0000_10;
	long var7 = 100__12_12;

Twist in the Tale2.2

Examine the following code initializations and select the incorrect answers:

	public class Foo {
		public static void main (String args[]) {
			boolean b1, b2, b3, b4, b5, b6; // line 1
			b1 = b2 = b3 = true; 			// line 2
			b4 = 0; 						// line 3
			b5 = 'false'; 					// line 4
			b6 = yes; 						// line 5
		}
	}

*	a The code on line 1 will fail to compile.
*	b Can’t initialize multiple variables like the code on line 2.
*	c The code on line 3 is correct.
	d Can’t assign 'false'to a boolean variable.
*	e The code on line 5 is correct.

Twist in the Tale 2.3

Your task is to evaluate the modified expression and determine the output of the following code:

int a = 10;
a = ++a + a + --a - --a + a++;
System.out.println (a);

Try to form the expression by replacing the values of variable ain the expression and explain each of them, the way it was done for you in figure 2.17.
*	32

Twist in the Tale 2.4

Examine the following code and circle {} the expressions that you think will evaluate. Draw a square [] around the expressions that you think may not execute. (For
example, on line 1, both a++ > 10 and ++b < 30 will evaluate .)

class TwistInTaleLLogicalOperators {
	public static void main (String args[]) {
		int a = 10;
		int b = 20;
		int c = 40;
		System.out.println({a++ > 10} || {++b < 30}); // line1
		System.out.println({a > 90}  && [++b < 30]);
		System.out.println({!(c>20)} && [a==10] );
		System.out.println({a >= 90} || {a <= 33} && {b == 10});
		System.out.println({a >= 99} && [a <= 33] || [b == 10]);
	}
}

Twist in the Tale 3.1

Select the correct output of the class TestPhonefrom the given options:

class Phone {
	String phoneNumber = "123456789";
	void setNumber () {
		String phoneNumber;
		phoneNumber = "987654321";
	}
}

class TestPhone {
	public static void main(String[] args) {
		Phone p1 = new Phone();
		p1.setNumber();
		System.out.println (p1.phoneNumber);
	}
}

*	a 123456789
	b 987654321
	c No output
	d The class Phone will not compile.

Twist in the Tale 3.2

Let’s modify the definition of the class Employee:

class Employee {
	String name;
	int age;

	Employee() {
		this ();
	}

	Employee (String newName, int newAge) {
		name = newName;
		age = newAge;
	}
}

* Won't compile. The empty constructor will call itselft recursively and infinitly

Twist in the Tale 3.3

Which of the options, when replacing the code on lines 1–3, makes it a wellencapsulated class?

class Phone { 
public String model;
	double weight; 									//LINE1
	public void setWeight(double w) {weight = w;} 	//LINE2
	public double getWeight() {return weight;} 		//LINE3
}

	a 	public double weight;
		private void setWeight(double w) { weight = w; }
		private double getWeight() { return weight; }

	b 	public double weight;
		void setWeight(double w) { weight = w; }
		double getWeight() { return weight; }

	c 	public double weight;
		protected void setWeight(double w) { weight = w; }
		protected double getWeight() { return weight; }

	d 	public double weight;
		public void setWeight(double w) { weight = w; }
		public double getWeight() { return weight; }

*	e 	None of the above.

Twist in the Tale 4.1

Which answer correctly shows its output?

String letters = "ABCAB";
System.out.println(letters.substring(0, 2).startsWith('A'));

*	a true
	b false
	c AB
	d ABC
	e Compilation error

Twist in the Tale 4.2

Which of the following options (there’s just one correct answer) correctly creates
an object of the class StringBuilderwith a default capacity of 16 characters?

	a StringBuilder name = StringBuilder.getInstance();
	b StringBuilder name = StringBuilder.createInstance();
	c StringBuilder name = StringBuilder.buildInstance();
*	d None of the above

Twist in the Tale 4.3

Modify some of the code used in the previous example as follows:

Line1> String multiStrArr[][] = new String[][]{
Line2> {"A", "B"},
Line3> null,
Line4> {"Jan", "Feb", null},
Line5> };

Which of the following individual options are true for the previous code?

	a Code on line 4 is the same as {"Jan", "Feb", null, null},
*	b No value is stored at multiStrArr[2][2]
*	c No value is stored at multiStrArr[1][1]
*	d Array multiStrArr is asymmetric. 


Twist in the Tale 4.4

What is the output of the following code?

ArrayList<String> myArrList = new ArrayList<String>();
String one = "One";
String two = new String("Two");
myArrList.add(one);
myArrList.add(two);
ArrayList<String> yourArrList = myArrList;
one.replace("O", "B");
for (String val : myArrList)
System.out.print(val + ":");
for (String val : yourArrList)
System.out.print(val + ":");

*	a One:Two:One:Two:
	b Bne:Two:Bne:Two:
	c One:Two:Bne:Two:
	d Bne:Two:One:Two:

Twist in the Tale 5.1

What is the output of this code?

String result = "1";
int score = 10;
if ((score = score+10) == 100)
result = "A";
else if ((score = score+29) == 50)
result = "B";
else if ((score = score+200) == 10)
result = "C";
else
result = "F";
System.out.println(result + ":" + score);

	a A:10
	b C:10
	c A:20
	d B:29
	e C:249
*	f F:249

Twist in the Tale 5.2

What is the output of this code?

String day = new String("SUN");
switch (day) {
case "MON":
case "TUE":
case "WED":
case "THU": System.out.println("Time to work");
break;
case "FRI": System.out.println("Nearing weekend");
break;
case "SAT":
case "SUN": System.out.println("Weekend!");
break;
default: System.out.println("Invalid day?");
}

	a Time to work
	b Nearing weekend
*	c Weekend!
	d Invalid day?

Twist in the Tale 5.3

examines the value of the long variable dayCount and prints out the name
of any one month that matches the day count?

a Submission by Harry:

long dayCount = 31;
if (dayCount == 28 || dayCount == 29)
System.out.println("Feb"); 
else if (dayCount == 30)
System.out.println("Apr");
else if (dayCount == 31)
System.out.println("Jan");

Prints "Jan"

b Submission by Selvan:

long dayCount = 31;
switch (dayCount) {
case 28:
case 29: System.out.println("Feb"); break;
case 30: System.out.println("Apr"); break;
case 31: System.out.println("Jan"); break;
} 

switch doesn't allow longs..

Twist in the Tale 5.4

What is the output of this code?

String[] programmers = {"Outer", "Inner"};
for (String outer : programmers) {
for (String inner : programmers) {
if (inner.equals("Inner"))
break;
System.out.print(inner + ":");
}
}

*	a Outer:Outer:
	b Outer:Inner:Outer:Inner:
	c Outer:
	d Outer:Inner:
	e Inner:Inner:

Twist in the Tale 6.1

Which of the options is correct for this modified code?

class Employee {
private String name;
String address;
protected String phoneNumber;
public float experience;
}
class Programmer extends Employee {
Programmer (String val) {
name = val;
}
String getName() {
return name;
}
}
class Office {
public static void main(String args[]) {
new Programmer ("Harry").getName();
}
}

	a The class Office prints Harry.
*	b The  derived  class Programmer can’t  define  a  getter  method  for  a  variable
	defined in its base class Employee.
	c The  derived  class Programmer can’t  access  variables  of  its  base  class  in  its
	constructors.
	d new Programmer ("Harry").getName(); isn’t the right way to create an object
	of class Programmer.
*	e Compilation error.

Twist in the Tale 6.2

select the correct options for the class TwistInTale2:

class Employee {}
interface Interviewer {}
class Manager extends Employee implements Interviewer {}
class HRExecutive extends Employee implements Interviewer {}
class TwistInTale2 {
public static void main (String args[]) {
Interviewer[] interviewer = new Interviewer[] {
new Manager(), // Line 1
new Employee(), // Line 2
new HRExecutive(), // Line 3
new Interviewer() // Line 4
};
}
}

*	a An  object  of  the  class Manager can  be  added  to  an  array  of  the  interface
	Interviewer. Code on line 1 will compile successfully.
	b An  object  of  the  class Employee can  be  added  to  an  array  of  the  interface
	Interviewer. Code on line 2 will compile successfully.
*	c An object of the class HRExecutivecan be added to an array of the interface
	Interviewer. Code on line 3 will compile successfully.
	d An object of the interface Interviewercan be added to an array of the interface Interviewer. Code on line 4 will compile successfully.

Twist in the Tale 6.3

What is the output of class TwistInTale3?

class Employee {
String name = "Emp";
String address = "EmpAddress";
}
class Programmer extends Employee{
String name = "Prog";
void printValues() {
System.out.print(this.name + ":");
System.out.print(this.address + ":");
System.out.print(super.name + ":");
System.out.print(super.address);
}
}
class TwistInTale3 {
public static void main(String args[]) {
new Programmer().printValues();
}
}

	a Prog:null:Emp:EmpAddress
	b Prog:EmpAddress:Emp:EmpAddress
	c Prog::Emp:EmpAddress
*	d Compilation error

Twist in the Tale 6.4

which  of  the options when inserted at //INSERT CODE HERE//will define the method runas a polymorphic method?

class Employee {
//INSERT CODE HERE// { 
System.out.println("Emp-run");
return null;
}
}
class Programmer extends Employee{
String run() {
System.out.println("Programmer-run");
return null;
}
}
class TwistInTale4 {
public static void main(String args[]) {
new Programmer().run();
}
}

*	a String run()
	b void run(int meters)
	c void run()
	d int run(String race)