Twist in the Tale 1.1

// Contents of Multiple.java
public interface Printable {
//.. we are not detailing this part
}
interface Movable {
//.. we are not detailing this part
}

Options: 
	a A Java source code file cannot define multiple interfaces.
	b A Java source code file can only define multiple classes.
* 	c A Java source code file can define multiple interfaces and classes.
* 	d The previous class will fail to compile

Twist in the Tale 1.2

// contents of Multiple2.java
interface Printable {
//.. we are not detailing this part
}
class MyClass {
//.. we are not detailing this part
}
interface Movable {
//.. we are not detailing this part
}
public class Car {
//.. we are not detailing this part
}
public interface Multiple2 {}

Options:
*	a The code fails to compile.
	b The code compiles successfully.
*	c Removing the definition of class Car will compile the code.
*	d Changing class Car to a non-public class will compile the code.
	e Changing class Multiple2 to a non-public class will compile the code.

Twist in the Tale 1.3

Executing "java EJava java one one", the output: "java one"


*	a 	class EJava {
		public static void main(String sun[]) {
		System.out.println(sun[0] + " " + sun[2]);
		}
		}
*	b 	class EJava {
		static public void main(String phone[]) {
		System.out.println(phone[0] + " " + phone[1]);
		}
		}
	c 	class EJava {
		static public void main(String[] arguments[]) {		
		System.out.println(arguments[0] + " " + arguments[1]);
		}
		}
	d 	class EJava {
		static void public main(String args[]) {
		System.out.println(args[0] + " " + args[1]);
		}
		}

Twist in the Tale 1.4

How can you declare a class Curtainin a package building so that it isnâ€™t visible outside the package building?

	package building;
	public class Curtain {}

	package building;
	protected class Curtain {}

*	package building;
	class Curtain {}

	An protected can be extended from other packages

*	package building;
	private class Curtain {}

	private no one can see it..

Twist in the Tale 2.1

Determine the output of the following code:
	class TwistInTaleNumberSystems {
		public static void main (String args[]) {
			int baseDecimal = 267;
			int octVal = 0413;
			int hexVal = 0x10B;
			int binVal = 0b100001011;
			System.out.println (baseDecimal + octVal);
			System.out.println (hexVal + binVal);
		}
	}

// 534, ambos

Determine which of these does this job correctly:
	long var1 = 0_100_267_760;
	long var2 = 0_x_4_13;
	long var3 = 0b_x10_BA_75;
	long var4 = 0b_10000_10_11;
*	long var5 = 0xa10_AG_75;
*	long var6 = 0x1_0000_10;
	long var7 = 100__12_12;

Twist in the Tale2.2

Examine the following code initializations and select the incorrect answers:

	public class Foo {
		public static void main (String args[]) {
			boolean b1, b2, b3, b4, b5, b6; // line 1
			b1 = b2 = b3 = true; 			// line 2
			b4 = 0; 						// line 3
			b5 = 'false'; 					// line 4
			b6 = yes; 						// line 5
		}
	}

*	a The code on line 1 will fail to compile.
*	b Canâ€™t initialize multiple variables like the code on line 2.
*	c The code on line 3 is correct.
	d Canâ€™t assign 'false'to a boolean variable.
*	e The code on line 5 is correct.

Twist in the Tale 2.3

Your task is to evaluate the modified expression and determine the output of the following code:

int a = 10;
a = ++a + a + --a - --a + a++;
System.out.println (a);

Try to form the expression by replacing the values of variable ain the expression and explain each of them, the way it was done for you in figure 2.17.
*	32

Twist in the Tale 2.4

Examine the following code and circle {} the expressions that you think will evaluate. Draw a square [] around the expressions that you think may not execute. (For
example, on line 1, both a++ > 10 and ++b < 30 will evaluate .)

class TwistInTaleLLogicalOperators {
	public static void main (String args[]) {
		int a = 10;
		int b = 20;
		int c = 40;
		System.out.println({a++ > 10} || {++b < 30}); // line1
		System.out.println({a > 90}  && [++b < 30]);
		System.out.println({!(c>20)} && [a==10] );
		System.out.println({a >= 90} || {a <= 33} && {b == 10});
		System.out.println({a >= 99} && [a <= 33] || [b == 10]);
	}
}

Twist in the Tale 3.1

Select the correct output of the class TestPhonefrom the given options:

class Phone {
	String phoneNumber = "123456789";
	void setNumber () {
		String phoneNumber;
		phoneNumber = "987654321";
	}
}

class TestPhone {
	public static void main(String[] args) {
		Phone p1 = new Phone();
		p1.setNumber();
		System.out.println (p1.phoneNumber);
	}
}

*	a 123456789
	b 987654321
	c No output
	d The class Phone will not compile.