/*
##################################################
Chapter 1
##################################################
*/

1.  What will be printed out if the following code is run with the java  SomeClass hello worldcommand?

public class SomeClass{
public static void main(String argv[])
{
System.out.println(argv[1]);
}
}

*   a.  world
	b.  hello
	c.  hello world
	d.  ArrayIndexOutOfBoundsExceptionis thrown


2.  Consider the following code sequence:

public class SomeClass{
public int i;
public static void main(String argv[]){
SomeClass sc = new SomeClass();
// Comment line
}
}

Which of the following statements will compile without syntax or runtime errors if they replace the comment line?

*   a.  sc.i = 5;
*   b.  int j = sc.i;
	c.  sc.i = 5.0;
*   d.  System.out.println(sc.i);

/*
##################################################
Chapter 2
##################################################
*/

1.  What will happen when you compile and run the following code?

public class ScopeClass{
private int i = 35;
public static void main(String argv[]){
int i = 45;
ScopeClass s = new ScopeClass ();
s.someMethod();
}
public static void someMethod(){
System.out.println(i);
}
}

	a.  35 will be printed out
	b.  45 will be printed out
*   c.  A compile time error will be generated
	d.  An exception will be thrown 

2.  Which of the following lines will compile without warning or error?

	a.  char d="d";
	b.  float f=3.1415;
*   c.  int i=34;
	d.  byte b=257;
*   e.  boolean isPresent=true;

3.  Given the following declaration:

public class SomeClass{
public int i;
public static void main(String argv[]){
SomeClass sc = new SomeClass();
// Comment line
}
}

Which of the following statements are correct if they replace the 
comment line?

*   a.  System.out.println(i);
*   b.  System.out.println(sc.i);
	c.  System.out.println(SomeClass.i);
*   d.  System.out.println((new SomeClass()).i);

4.  Given the following declaration:

StringBuilder sb = new StringBuilder;

Which of the following are valid uses of the sb variable?

*   a.  sb.append(34.5);
	b.  sb.deleteCharAt(34.5);
	c.  sb.toInteger(3);
*   d.  sb.toString();

5.  Which of the following will return the position of the first letter 'a' where the 
string s contains "banana"?

	a.  lastIndexOf(2,s);
*   b.  s.indexOf('a');
	c.  s.charAt(2);
	d.  indexOf(s,'v');

6.  Given the following code, which expression displays the word "Equal"?

String s1="Java";
String s2="java";
if(expression) {
System.out.println("Equal");
} else {
System.out.println("Not equal");
}

	a.  s1==s2
	b.  s1.matchCase(s2)
*   c.  s1.equalsIgnoreCase(s2)
	d.  s1.equals(s2)

/*
##################################################
Chapter 3
##################################################
*/

1.   What is the result of the following operation?
System.out.println(4 % 3);

	a.   0
*   b.   1
	c.   2
	d.   3

2.   Which of the following expressions will evaluate to 7?

*   a.   2 + 4 * 3- 7
	b.   (2 + 4) * (3 - 7)
	c.   2 + (4 * 3) - 7
	d.   ((2 + 4) * 3) - 7)

3.   What is the output of the following statement?
System.out.println( 16 >>> 3);

	a.   1
*   b.   2
	c.   4
	d.   8

1 0000
0 0010

4.   Given the following declarations, which of the following if statements will
compile without errors?

int i = 3;
int j = 3;
int k = 3;

*   a.   if(i > j) {}
	b.   if(i > j > k) {}
*   c.   if(i > j && i > k) {}
	d.   if(i > j && > k) {}

5.   What will be printed out when the following code is executed?

switch (5) {
case 0:
System.out.println("zero");
break;
case 1:
System.out.println("one");
default:
System.out.println("default");
case 2:
System.out.println("two");
}

	a.   one
*   b.   default and two
	c.   one, two, and default
	d.   Nothing, a compile-time error is generated

/*
##################################################
Chapter 4
##################################################
*/

1.  Which of the following statements will compile without an error?

*   a.  int arr[];
	b.  int arr[5];
	c.  int arr[5] = {1,2,3,4,5};
*   d.  int arr[] = {1,2,3,4,5};

2.  Which of the following declares an array that supports two rows and a 
variable number of columns?

	a.  int arr[][] = new int[2][3];
*   b.  int arr[][] = new int[2][];
	c.  int arr[][] = new int[][];
	d.  int arr[][] = new int[][3];

3.  Given the following code, which of the following statements can be used to 
determine if cat can be found in the list?

ArrayList<String> list = new ArrayList<>();
list.add("dog");
list.add("cat");
list.add("frog");

*   a.  list.contains("cat")
	b.  list.hasObject("cat")
*   c.  list.indexOf("cat")
	d.  list.indexOf(1)

/*
##################################################
Chapter 5
##################################################
*/

1.   Given the following declarations, which of the following statement will
compile?
int i = 5;
int j = 10;

*	a.   while(i < j) {}
	b.   while(i) {}
	c.   while(i = 5) {}
*	d.   while((i = 12)!=5) {}

2.   Given the following declaration of an array, which statement will display
each element of the array?

int arr[] = {1,2,3,4,5};

	a.   for(int n : arr[]) { System.out.println(n);
		}
*	b.   for(int n : arr) { System.out.println(n);
		}
	c.   for(int n=1; n < 6; n++) { System.out.println(arr[n]);
		}
	d.   for(int n=1; n <= 5; n++) {
		 System.out.println(arr[n]);
		}

3.   Which of the following do/while loops will compile without errors?
	
*	a.  int i = 0;
		do {
		System.out.println(i++);
		} while (i < 5);
*	b.  int i = 0;
		do
		System.out.println(i++);
		while (i < 5);
	c.  int i = 0;
		do
		System.out.println(i++);
		while i < 5;
	d.  i = 0;
		do
		System.out.println(i);
		i++;
		while (i < 5)

4.   Which of the following loops are equivalent?

*	a.   for(String n : list) {
	System.out.println(n);
	}

*	b.   for(int n = 0; n < list.size(); n++ ){
	System.out.println(list.get(n));
	}

*	c.   Iterator it = list.iterator();
	while(it.hasNext()) {
	System.out.println(it.next());
	}

5.   What will be output by the following code?

int i;
int j;
for (i=1; i < 4; i++) {
for (j=2; j < 4; j++) {
if (j == 3) {
continue;
}
System.out.println("i: " + i + " j: " + j);
}
}

*	a. i: 1 j: 2
	   i: 2 j: 2
	   i: 3 j: 2
	b. i: 1 j: 3
	   i: 2 j: 3
	   i: 3 j: 3
	c. i: 1 j: 1
	   i: 2 j: 1
	   i: 3 j: 1

/*
##################################################
Chapter 7
##################################################
*/


1.	 Which set of statements result in ClassB and ClassC being derived
from ClassA ?
*	a.	 class ClassB extends ClassA {}
	b.	 class ClassB extends ClassC {}
	c.	 class ClassA extends ClassB {}
*	d.	 class ClassC extends ClassB {}
	e.	 No combination will work

2.	 Which of the following must be true for a method to support polymorphism?
*	a.	 The method must override a base class method
	b.	 The method must overload a base class method
*	c.	 The method's class must extend a base class that has the overridden method
*	d.	 The method must execute against a base class reference variable

3.	 What method is used to determine the type of an object?
	a.	 isType
	b.	 typeOf
	c.	 instanceof
*	d.	 instanceOf
	
4.	 Which of the following are valid casts?
	a.	 num1 = num2;
*	b.	 num1 = (int)num2;
*	c.	 num1 = (float)num2;
	d.	 num1(int) = num2;
	
5.	 Given the following class definitions:
public class ClassA {
public ClassA() {
System.out.println("ClassA constructor");
}
public void someMethod() {
System.out.println("ClassA someMethod");
}
}
class ClassB extends ClassA {
public ClassB() {
System.out.println("ClassB constructor");
}
public void someMethod() {
// comment
System.out.println("ClassB someMethod");
}
public static void main(String args[]) {
ClassB b = new ClassB();
b.someMethod();
}
}
What statement is needed at the comment line to generate the
following output:
ClassA constructor
ClassB constructor
ClassA someMethod
ClassB someMethod


	a.	 super();
	b.	 super().someMethod;
*	c.	 super.someMethod();
	d.	 someMethod();
	e.	 None of the above

6.	 Which of the following statements are true?
*	a.	 An abstract class must use the abstract keyword when declared
	b.	 An abstract class must have one or more abstract methods
*	c.	 An abstract class cannot extend a non-abstract class
	d.	 An abstract class cannot implement an interface // IT CAN!!