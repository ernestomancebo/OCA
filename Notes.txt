equals() contract!!

Compile-time constant:
final variables that must be declared and initialized in the same line.
Switch only accepts Compile-time constant; The values must be: integers, except long, them wrappers, String and enum

Doesn't matter where case labels are placed.. Them acts like doors..
Case labels can't be duplicated

Switch discarts decimals values defining constants.

Watch out for the annonimous block inside if's

Labeled statements:
■ You can add labels to a code block defined using braces, {}, all looping statements (for, enhanced forloop, while, do-while), conditional constructs (if
and switchstatements), expressions and assignments, returnstatements, try
blocks, and throwsstatements.
■ You can’t add labels to declarations of variables.
■ You can use a labeled breakstatement to exit an outer loop. 
■ You can use a labeled continuestatement to skip the iteration of the outer loop.

NOTE When you try to access an invalid array position, ArrayIndexOutOfBoundsException is thrown. When you try to access an invalid ArrayList position, IndexOutOfBoundsExceptionis thrown.

Exception hierarchy!!!! ****

ExceptionInInitializerError can  be  caused  by  an  object  of
RuntimeExceptiononly. It can’t occur as the result of an error or checked
exception thrown by the staticinitialization block.

Don’t  confuse  the  exception  thrown  by Class.forName(),  used  to
load  the  class,  and NoClassDefFoundErrorthrown by the JVM. Class.forName()throws ClassNotFoundException.

Narrowing -> Lose of information by casting
Empty statement -> consists of a single semicolon. When executed, it does nothing. It is commonly used as a place holder indicating that nothing is to be done

INTEGER DATA TYPES -> include byte, char, short, and int. Any of these data types can be used with an integer switch statement. The data type longis not allowed

BigDecimal provides better accuracy for decimal points.

By using the strictfpkeyword, all calculations will strictly abide by the IEEE standard

Java does not support two-dimensional arrays in the strictest sense. In reality they are arrays of arrays.

RAGGED ARRAYS -> the rows do not necessarily have to be the same size.

To compare two arrays correctly we need to use the Arraysclass' equals or deepEqualsmethods.

Shallow copy: Refers to when only the reference values are copied. After the copy operation, the original object has not been duplicated.
In a deep copy, the reference to the object is not copied. Instead, a new copy of the object is created.

Comparator Object??

While ArrayListis a powerful class, arrays should still be used if:
•  There is a known number of elements
•  It has a small fixed upper bound
•  Primitive data types are needed for efficiency
•  No elements need to be inserted