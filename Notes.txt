equals() contract!!

Compile-time constant:
final variables that must be declared and initialized in the same line.
Switch only accepts Compile-time constant; The values must be: integers, except long, them wrappers, String and enum

Doesn't matter where case labels are placed.. Them acts like doors..
Case labels can't be duplicated

Switch discarts decimals values defining constants.

Watch out for the annonimous block inside if's

Labeled statements:
■ You can add labels to a code block defined using braces, {}, all looping statements (for, enhanced forloop, while, do-while), conditional constructs (if
and switchstatements), expressions and assignments, returnstatements, try
blocks, and throwsstatements.
■ You can’t add labels to declarations of variables.
■ You can use a labeled breakstatement to exit an outer loop. 
■ You can use a labeled continuestatement to skip the iteration of the outer loop.

NOTE When you try to access an invalid array position, ArrayIndexOutOfBoundsException is thrown. When you try to access an invalid ArrayList position, IndexOutOfBoundsExceptionis thrown.

Exception hierarchy!!!! ****

ExceptionInInitializerError can  be  caused  by  an  object  of
RuntimeExceptiononly. It can’t occur as the result of an error or checked
exception thrown by the staticinitialization block.

Don’t  confuse  the  exception  thrown  by Class.forName(),  used  to
load  the  class,  and NoClassDefFoundErrorthrown by the JVM. Class.forName()throws ClassNotFoundException.

Narrowing -> Lose of information by casting
Empty statement -> consists of a single semicolon. When executed, it does nothing. It is commonly used as a place holder indicating that nothing is to be done

INTEGER DATA TYPES -> include byte, char, short, and int. Any of these data types can be used with an integer switch statement. The data type longis not allowed

BigDecimal provides better accuracy for decimal points.

By using the strictfpkeyword, all calculations will strictly abide by the IEEE standard

Java does not support two-dimensional arrays in the strictest sense. In reality they are arrays of arrays.

RAGGED ARRAYS -> the rows do not necessarily have to be the same size.

To compare two arrays correctly we need to use the Arraysclass' equals or deepEqualsmethods.

Shallow copy: Refers to when only the reference values are copied. After the copy operation, the original object has not been duplicated.
In a deep copy, the reference to the object is not copied. Instead, a new copy of the object is created.

Comparator Object??

While ArrayListis a powerful class, arrays should still be used if:
•  There is a known number of elements
•  It has a small fixed upper bound
•  Primitive data types are needed for efficiency
•  No elements need to be inserted

The comma opperator -> It is used to separate the parts of the initial-expression and the end-loop operation sections of the for loop.

The equals method is executed against the string literal and the command is used as its argument. This approach avoids
NullPointerException that will result if the command contains a null value. As the string literals are never null, this exception will never occur.

A label consists of a name followed by a colon (":")

Infinite loops --> The moral of the story is, "Be careful with loops". Infinite loops can be both a
useful construct for solving some problems and a problematic construct when used unintentionally.

Multiplying by 1.0f is necessary to avoid integer division:
	average = total / (age.length * 1.0f);

Pitfall with decimals when comparing -> The number 0.1 cannot be stored precisely in base two in the same way that the
decimal equivalent of the fraction 1/3 cannot be represented exactly (0.333333...). The same goes to 0.1 and 0.10000

There are four uses of the this keyword:
•	 Performing constructor chaining
•	 Accessing instance variables
•	 Passing the current object to a method
•	 Returning the current object from a method

The parameters will have "precedence" over the instance variables.

Another approach is to declare the parameter as a constant using the final keyword, as shown in the following code snippet. When we take this approach, a syntax error is generated because we are trying to modify the parameter.

•	 Argument: This is the variable being passed
•	 Parameter: This is the element defined within the method's signature

Java do passing by value: When a method is called, a copy of the argument is assigned to the parameter.

When a primitive data type is passed, he original data is not changed.
When a reference variable is passed, we have two references to the same object; We can modify the object using either reference variable

Variable number of args:

•	 The variable number of parameters must all be the same type
•	 They are treated as an array within the method
•	 They must be the last parameter of the method

To create an immutable object:

•	 Make the class final which means that it cannot be extended (covered in
the Using the final keyword with classes section in Chapter 7, Inheritance and
Polymorphism)
•	 Keep the fields of the class private and ideally final
•	 Do not provide any methods that modify the state of the object, that is do not
provide setter or similar methods
•	 Do not allow mutable field objects to be changed

As a general rule, always add a default constructor to a class. This is particularly important when the class is a base class.

Initializing variables members:

Instance variable initializers
Initialization block (Before the constructor)
Constructor

The order of initializing: 

1. The zeroing of fields performed when the object is instantiated
2. The initialization of final and static variables
3. The assignment of instance variables initializers
4. The execution of initialization blocks
5. The code within a constructor

POLYMORPHISM -> is the result of overriding methods of a base class.

/*
##################################################
A significant part of becoming a skilled Java programmer is 
learning to find, understand, and use those classes found in 
libraries relevant to your application's domain.
##################################################
*/

OVERLOADING VS. OVERRIDING

Characteristic 	Overloading 	Overriding
Method name 	Same 			Same
Signature 		Different 		Same
Class 			Same class 		In a derived class

It is not possible to call a base method above the current base class. 
	super.super.toString(); //illegal

The application of the instanceof operator confirms that the Employee class is 
ultimately an object of Object. (instanceof chequea hasta lo ultimo!!)

When a new class is created it is always a good idea to override the toString, equals, and hashCode methods.

Before an object can be cloned, its class must implement the java.lang.Cloneable interface. The clone method is protected.

When we cast a derived class object to a base class reference variable, it is called upcasting. When we cast a base class object to a derived class reference variable, it is called downcasting.

Upcasting is possible because the derived object contains everything that the base class has, plus something more. Downcasting is not a good idea as the reference variable expects an object with more capabilities than is supplied. =(

The use of the private and protected keywords cannot be used with a class definition unless the class is an inner class. An inner class is a class that is declared within another class.

Checked exceptions include all exceptions derived from the Exceptionclass and are not derived from the RuntimeExceptionclass.
Unchecked exceptions are all other exceptions. They include exceptions, such as division by zero and array subscripting errors.

A general rule of thumb is to declare the exception as an unchecked exception if the client code cannot do anything to recover from the exception. Otherwise, if they can handle it, make it a checked exception.

There are three general techniques we can use when dealing with exceptions in Java:
•  Traditional tryblock
•  The new "try-with-resources" block introduced in Java 7
•  Pass the buck

finally block will not execute if the System.exit method is invoked in a try or catch block.

The general rule is always to list the "most-derived" EXCEPTIONS first. 

Keep in mind that tHE CATCH BLOCK'S PARAMETER IS IMPLICITLY FINAL. It is not possible to assign a different exception to the parameter.

A try block needs either a catch block or a finally block. Without one or both a compile time error will be generated.

Exceptions guidelines (10 coommandments):
	Repeating code that threw an exception
	Being specific in which exception you are catching
	Not lose the stack trace
	Scoping and block lengths
	Throwing a UnsupportedOperationException object
	DO NOT Ignore exceptions
	Handle exceptions as late as you can (apropiated level)
	NOT Catching too much in a single block
	Logging exceptions
	Do not use exceptions to control normal logic flow
	Do not try to handle unchecked exceptions

Simulator:

Exceptions:
	When you use System.out.println(exception), a stack trace is not printed. Just the name of the exception class and the message is printed. When you use exception.printStackTrace()
	You are throwing an exception and there is no try or catch block, or a throws clause. So it will not compile

	Checked exceptions:
	exceptional conditions external to an application that a well written application should anticipate and from which it can recover.
	Note that here recovery doesn't necessarily mean to keep functioning normally. It means that the program shouldn't just crash. If it absolutely cannot proceed, it should notify the user appropriately and then end gracefully.

Working with Inheritance:
	Remember that member variables are shadowed and not overridden.
	The getClass method always returns the Class object for the actual object on which the method is called irrespective of the type of the reference.
	/* CHAINED CONSTRUCTOR */
	Observer that method startUp(String s) of CorbaComponent is overridden by the subclass OrderManager.  When an object of class OrderManager is constructed, the default no args constructor of CorbaComponent is called. This constructor calls the startUp(String s) with "IOR" as parameter. Now, there are two eligible methods which can be called - CorbaComponent's startUp and OrderManager's startUp.  The method selection is done on the basis of the actual class of the object (which is OrderManager here). So OrderManager's startUp is called, which sets the ior variable to URL://IOR.  Unlike instance method selection, variable (and static method) selection is done on the basis of declared class of the variable and not on the actual class of object that it is referring to.
	Class B's default constructor looks like this: public B() {} However, Constructors implicitly (if an explicit call to the superclass's constructor is not present) call their superclass's constructor super().
	Since Truck is a subclass of Automobile, a = t will be valid at compile time as well runtime. But a cast is needed to make for t = (Truck) a
	The rule is that an overriding method cannot throw an exception that is a super class of the exception thrown by the overridden method.
	b instanceof Flyer will not compile because the compiler knows that it is not possible for b to point to an object of a class that implements Flyer.

	HAVING AMBIGUOUS FIELDS or methods does not cause any problems by itself but referring to such fields/methods in an ambiguous way will cause a compile time error. So you cannot call : System.out.println(VALUE); because it will be ambiguous (there are two VALUE definitions). But the following lines are valid :  TestClass tc = new TestClass(); System.out.println(( ( T1) tc).VALUE);
	The overriding method must have same return type in case of primitives (a subclass is allowed in case of classes)  (Therefore, the choices returning int are not valid.) and the parameter list must be the same (The name of the parameter does not matter, just the Type is important). Having no throws clause is also valid since an empty set is a valid subset. 
	B's toString will be called no matter what reference you use

	The return type should be same for overridden and overriding method.
	Unlike a class, an interface can extend from multiple interfaces.
	WATCH OUT THE MODIFIERS FOR CONSTRUCTORS!!
	An overriding method cannot throw a superclass exception, while a constructor of a subclass cannot throw subclass exception (Assuming that the same exception or its super class is not present in the subclass constructor's throws clause).
	A constructor can't be final.
	The constructor can take the same type as a parameter.
	By passing null as argument, the compiler calls the one most especific (in hierarchy); null can be passed as both StringBuffer and String and none is more specific than the other. So, it will not compile. 

Working with methods:
	There is no 'this' available in main so none of the this.x are valid.
	Finals variables you can initialize it in the constructor, in line or an instance block
	In cases where multiple methods are applicable, the compiler always calls the most specific one

	Primitive, Wrappers and var-args arguments rules:  
	1. The compiler always tries to choose the most specific method available with least number of modifications to the arguments.  
	2. Java designers have decided that old code should work exactly as it used to work before boxing-unboxing functionality became available.  
	3. Widening is preferred to boxing/unboxing (because of rule 2), which in turn, is preferred over var-args.

	It is never bound to probe(Long ) because Integer and Long are different object types and there is no IS-A relation between them.
	Order of initialization:
	First, static statements/blocks are called IN THE ORDER they are defined. (Hence, a and c will be printed.)
	Next, instance initializer statements/blocks are called IN THE ORDER they are defined. Finally, the constructor is called. So, then it prints b.

	toString() in Object class:
	The Object class's toString generates a string using:  getClass().getName() + '@' + Integer.toHexString(hashCode()) But in this case, String class overrides the toString() method that returns just the actual string value.

Loops:
	
	MAP DOES NOT IMPLEMENT COLLECTION INTERFACE, though you can use Map.getKeySet() or Map.values() to get a Collection and then iterate over that Collection.
	A keyword and so cannot be used as a label, but you can use a class name
	With an enhanced for:
		Cannot use an existing/predefined variable in the variable declaration part.
		final is the only modifier (excluding annotations) that is allowed here.
	You can't use a if-else with "break/continue" statement before statements, because the rest of the statements in the for loop are unreachable and so the code will not compile.

Arrays:
	You cannot specify the size on left hand side
	The arraycopy method basically copies an array from the specified source array, beginning at the specified position, to the specified position of the destination array. The last parameter is the number of elements that you want to copy. 

Operation an decision constructs:
	The boolean operators have more precedence than =. (In fact, = has least precedence of all operators.)
	the += operator is expanded to the operation i.e.: k = 1; k += 2 === k = 1 + 2; 
	INTEGER DIVISION: (5/4) performs integer division because both 5 and 4 are integers, resulting in the value 1
	Char sum: ( 'a' + 1 ) will be promoted to int => 97 + 1 = 98

Java data types:
	charAt(): it takes an int and char will be implicitly promoted to int.
	charAt(): As per the API documentation for charAt, it throws IndexOutOfBoundsException if you pass an invalid value.
	Objects creations: two news => two objects. t1, t2, t3, t4 => 4 references.
	You can only assign true or false to a boolean variable.

Java basics:
	Java does not allow chained initialization in declaration so option 1 and 5 are not valid.
	A package statement can never have a *. It should specify the exact package name.
	The order of keywords for a STATIC IMPORT MUST BE "import static ... ".
	You can either import all the static member or one specific
	FINAL is a valid modifier for the standard main method, although static methods can never be overridden, they can be shadowed.
	Since the method is static, this access will only be valid if variable 'a' is declared static within the class. (A is instance var)
	'this' is inmutable
	using 'this' to acces to a static var is not an error
	locals/method vars have to be explicitly initialized.