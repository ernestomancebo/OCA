*  Contestadas
&* Contestadas erroneas
$  No seleccionadas y estan correctas

/*
##################################################
Topic 1
##################################################
*/

Q1-1.What are the valid components of a Java source file (choose all that apply):

* 	a package statement
*	b import statements
*	c methods
*	d variables
	e Java compiler
	f Java Runtime Environment

Q1-2. The  following  numbered  list  of  Java  class  components  is  not  in  any  particular order. Select the correct order of their occurrence in a Java class (choose all that apply):

1 comments
2 import statement
3 package statement
4 methods
5 class declaration
6 variables

*	a 1, 3, 2, 5, 6, 4
*	b 3, 1, 2, 5, 4, 6
	c 3, 2, 1, 4, 5, 6
*	d 3, 2, 1, 5, 6, 4

Q1-3.Which of the following examples define the correct Java class structure?

	a #connect java compiler;
	#connect java virtual machine;
	class EJavaGuru {}

	b package java compiler;
	import java virtual machine;
	class EJavaGuru {}

	c import javavirtualmachine.*;
	package javacompiler;
	class EJavaGuru {
	void method1() {}
	int count;
	}

*	d package javacompiler;
	import javavirtualmachine.*;
	class EJavaGuru {
	void method1() {}
	int count;
	}

	e #package javacompiler;
	$import javavirtualmachine;
	class EJavaGuru {
	void method1() {}
	int count;
	}

	f package javacompiler;
	import javavirtualmachine;
	Class EJavaGuru {
	void method1() {}
	int count;
	}

Q1-4.Given the following contents of the Java source code file MyClass.java, select the correct options:

// contents of MyClass.java
package com.ejavaguru;
import java.util.Date;
class Student {}
class Course {}

	a The imported class, java.util.Date, can be accessed only in the class Student.
*	b The imported class, java.util.Date, can be accessed by both the Studentand
	Courseclasses.
*	c Both of the classes Student and Course are defined in the package com.ejavaguru.
	d Only  the  class Student is  defined  in  the  package com.ejavaguru. The class
	Course is defined in the default Java package.

Q1-5.Given the following definition of the class EJavaGuru,

class EJavaGuru {
public static void main(String[] args) {
System.out.println(args[1]+":"+ args[2]+":"+ args[3]);
}
}

what is the output of the previous class, if it is executed using the following command:

	java EJavaGuru one two three four

	a one:two:three
	b EJavaGuru:one:two
	c java:EJavaGuru:one
*	d two:three:four

Q1-6.Which of the following options, when inserted at //INSERT CODE HERE, will print out EJavaGuru?

public class EJavaGuru {
// INSERT CODE HERE 
{
System.out.println("EJavaGuru");
}
}

	a public void main (String[] args)
	b public void main(String args[])
*	c static public void main (String[] array)
	d public static void main (String args)
	e static public main (String args[])

Q1-7.Select the correct options:

$	a You can start the execution of a Java application through the main method.
	b The Java compiler calls and executes the main method.
*	c The Java Virtual Machine calls and executes the main method.
	d A class calls and executes the main method.

Q1-8.A class Course is defined in a package com.ejavaguru. Given that the physical location of the corresponding class file is /mycode/com/ejavaguru/Course.class and execution takes place within the mycode directory, which of the following lines of code, when
inserted at // INSERT CODE HERE, will import the Courseclass into the class MyCourse?
// INSERT CODE HERE
class MyCourse {
Course c;
}

	a import mycode.com.ejavaguru.Course;
*	b import com.ejavaguru.Course;
	c import mycode.com.ejavaguru;
	d import com.ejavaguru;
	e import mycode.com.ejavaguru*;
	f import com.ejavaguru*;

Q1-9.Examine the following code:
class Course {
String courseName;
}
class EJavaGuru {
public static void main(String args[]) {
Course c = new Course();
c.courseName = "Java";
System.out.println(c.courseName);
}
}

Which of the following statements will be true if the variable courseName is defined as a private variable?

	a class EJavaGuru will print Java.
	b class EJavaGuru will print null.
*	c class EJavaGuru won’t compile.
	d class EJavaGuru will throw an exception at runtime.

Q1-10.Given the following definition of the class Course,

package com.ejavaguru.courses;
class Course {
public String courseName;
}

what’s the output of the following code?

package com.ejavaguru;
import com.ejavaguru.courses.Course;
class EJavaGuru {
public static void main(String args[]) {
Course c = new Course();
c.courseName = "Java";
System.out.println(c.courseName);
}
}

	a The class EJavaGuru will print Java.
	b The class EJavaGuru will print null.
*	c The class EJavaGuru won’t compile.
	d The class EJavaGuru will throw an exception at runtime.

Q1-11.Given the following code, select the correct options:

package com.ejavaguru.courses;
class Course {
public String courseName;
public void setCourseName(private String name) {
courseName = name;
}
}

*	a You can’t define a method argument as a private variable.
	b A method argument should be defined with either public or default accessibility.
	c For overridden methods, method arguments should be defined with protected accessibility.
	d None of the above.

/*
##################################################
Topic 2
##################################################
*/

Q2-1.Select all incorrect statements:

	a A programmer can’t define a new primitive data type.
*	b A programmer can define a new primitive data type.
*	c Once assigned, the value of a primitive can’t be modified.
*	d A value can’t be assigned to a primitive variable.

Q2-2.Which of the options are correct for the following code?

	public class Prim {								// line 1
		public static void main(String[] args) {	// line 2
			char a = 'a'; 							// line 3
			char b = -10; 							// line 4
			char c = '1'; 							// line 5
			integer d = 1000; 						// line 6
			System.out.println(++a + b++ * c - d); 	// line 7
		} 											// line 8
	} 												// line 9

*	a Code at line 4 fails to compile.
	b Code at line 5 fails to compile.
$	c Code at line 6 fails to compile.
$	d Code at line 7 fails to compile.

Q2-3.What is the output of the following code?

	public class Foo {
		public static void main(String[] args) {
			int a = 10;
			long b = 20;
			short c = 30;
			System.out.println(++a + b++ * c);
		}
	}

*	a 611
	b 641
	c 930
	d 960

Q2-4.Select the option(s) that is/are the best choice for the following:
___________________ should be used to store a count of cars manufactured by a car
manufacturing  company.  _________________  should  be  used  to  store whether this
car  manufacturing  company  modifies  the  interiors  on  the  customer’s  request.
____________ should be used to store the maximum speed of a car.

$	a long, boolean, double
	b long, int, float
	c char, int, double
*	d long, boolean, float

Q2-5.Which of the following options contain correct code to declare and initialize
variables to store whole numbers?

	a bit a = 0;
	b integer a2 = 7;
*	c long a3 = 0x10C;
*	d short a4 = 0512;
&*	e double a5 = 10;
*	f byte a7 = -0;
*	g long a8 = 123456789;

Q2-6.Select the options that, when inserted at // INSERT CODE HERE, will make the following code output a value of 11:

	public class IncrementNum {
		public static void main(String[] args) {
			int ctr = 50;
			// INSERT CODE HERE
			System.out.println(ctr % 20);
		}
	}

*	a ctr += 1;
&*	b ctr =+ 1;
*	c ++ctr;
	d ctr = 1;

Q2-7.What is the output of the following code?

int a = 10;
int b = 20;
int c = (a * (b + 2)) - 10-4 * ((2*2) - 6;
System.out.println(c);

	a 218
	b 232
	c 246
*	d Compilation error

Q2-8.What is true about the following lines of code?

boolean b = false;
int i = 90;
System.out.println(i >= b);

	a Code prints true
	b Code prints false
	c Code prints 90 >= false
*	d Compilation error

Q2-9.Examine the following code and select the correct options:

	public class Prim { 								// line 1
		public static void main(String[] args) { 		// line 2
		int num1 = 12; 									// line 3
		float num2 = 17.8f; 							// line 4
		boolean eJavaResult = true; 					// line 5
		boolean returnVal = num1 >= 12 && num2 < 4.567 
		|| eJavaResult == true; 						// line 6
		System.out.println(returnVal); 					// line 7
		} 												// line 8
	} 													// line 9

	a Code prints false
*	b Code prints true
*	c Code will print true if code on line 6 is modified to the following:
		boolean returnVal = (num1 >= 12 && num2 < 4.567) || eJavaResult == 	true;
	d Code will print true if code on line 6 is modified to the following:
		boolean returnVal = num1 >= 12 && (num2 < 4.567 || eJavaResult == false);

Q2-10.If the functionality of the operators = and >were to be swapped in Java (for the
code on line numbers 4, 5, and 6), what would be the result of the following code?

boolean myBool = false; 				// line 1
int yourInt = 10; 						// line 2
float hisFloat = 19.54f; 				// line 3
System.out.println(hisFloat > yourInt); // line 4
System.out.println(yourInt = 10); 		// line 5
System.out.println(myBool > false); 	// line 6

	a true
	true
	false
$	b 10.0
	false
	false
	c false
	false
	false
&*	d Compilation error

/*
##################################################
Topic 3
##################################################
*/

Q3-1.How can you include encapsulation in your class design?

*	a Define instance variables as private members.
*	b Define public methods to access and modify the instance variables.
	c Define some of the instance variables as public members.
	d All of the above.

Q3-2.Examine the following code and select the correct option(s):

public class Person {
	public int height;
	public void setHeight(int newHeight) {
		if (newHeight <= 300)
		height = newHeight;
	}
}

	a The height of a Person can never be set to more than 300.
	b The previous code is an example of a well-encapsulated class.
	c The  class  would  be  better  encapsulated  if  the  height  validation  weren’t  set
	to 300.
*	d Even though the class isn’t well encapsulated, it can be inherited by other classes.

Q3-3. Which  of  the  following  methods  correctly  accepts  three  whole  numbers  as
method arguments and returns their sum as a decimal number?

	a public void addNumbers(byte arg1, int arg2, int arg3) {
	double sum = arg1 + arg2 + arg3;
	}
*	b public double subtractNumbers(byte arg1, int arg2, int arg3) {
	double sum = arg1 + arg2 + arg3;
	return sum;
	}
	c public double numbers(long arg1, byte arg2, double arg3) {
	return arg1 + arg2 + arg3;
	}
&	d public float wakaWakaAfrica(long a1, long a2, short a977) {
	double sum = a1 + a2 + a977;
	return (float)sum;
	}

LONG IS ALSO AN WHOLE NUMBER!!

Q3-4.Which of the following statements are true?

&	a If the return type of a method is int, the method can return a value of type byte.
*	b A method may or may not return a value.
*	c If the return type of a method is void, it can define a return statement without
	a value, as follows: 
		return;
*	d A method may or may not accept any method arguments.
	e A method must accept at least one method argument or define its return type.
	f A method whose return type is String can’t return null.

BYTE CAN PERFECTLY FIT INTO AN INT!!

Q3-5.Given the following definition of class Person,

class Person {
	public String name;
	public int height;
}

what is the output of the following code?

class EJavaGuruPassObjects1 {
	public static void main(String args[]) {
		Person p = new Person();
		p.name = "EJava";
		anotherMethod(p);
		System.out.println(p.name);
		someMethod(p);
		System.out.println(p.name);
	}

	static void someMethod(Person p) {
		p.name = "someMethod";
		System.out.println(p.name);
	}

	static void anotherMethod(Person p) {
		p = new Person();
		p.name = "anotherMethod";
		System.out.println(p.name);
	}
}

	a anotherMethod
	anotherMethod
	someMethod
	someMethod

*	b anotherMethod
	EJava
	someMethod
	someMethod

	c anotherMethod
	EJava
	someMethod
	EJava

	d Compilation error.

Q3-6.What is the output of the following code?

class EJavaGuruPassPrim {
	public static void main(String args[]) {
		int ejg = 10;
		anotherMethod(ejg);
		System.out.println(ejg);
		someMethod(ejg);
		System.out.println(ejg);
	}

	static void someMethod(int val) {
		++val;
		System.out.println(val);
	}

	static void anotherMethod(int val) {
		val = 20;
		System.out.println(val);
	}
}

	a 20
	10
	11
	11

	b 20
	20
	11
	10

*	c 20
	10
	11
	10

	d Compilation error

Q3-7.Given the following signature of method eJava, choose the options that correctly overload this method:

public String eJava(int age, String name, double duration)

	a private String eJava(int val, String firstName, double dur)
	b public void eJava(int val1, String val2, double val3)
&	c String eJava(String name, int age, double duration)
*	d float eJava(double name, String age, byte duration)
*	e ArrayList<String> eJava()
*	f char[] eJava(double numbers)
*	g String eJava()

Q3-8.Given the following code,

class Course {
	void enroll(long duration) {
		System.out.println("long");
	}
	void enroll(int duration) {
		System.out.println("int");
	}
	void enroll(String s) {
		System.out.println("String");
	}
	void enroll(Object o) {
		System.out.println("Object");
	}
}

what is the output of the following code?

class EJavaGuru {
	public static void main(String args[]) {
		Course course = new Course();
		char c = 10;
		course.enroll(c);
		course.enroll("Object");
	}
}

	a Compilation error
	b Runtime exception
*	c int
	String
	d long
	Object

Q3-9. Examine the following code and select the correct options:

class EJava {
	public EJava() {
		this(7);
		System.out.println("public");
	}
	private EJava(int val) {
		this("Sunday");
		System.out.println("private");
	}
	protected EJava(String val) {
		System.out.println("protected");
	}
}

class TestEJava {
	public static void main(String[] args) {
		EJava eJava = new EJava();
	}
}

*	a The class EJavadefines three overloaded constructors.
	b The class EJavadefines two overloaded constructors. The private constructor
	isn’t counted as an overloaded constructor.
	c Constructors with different access modifiers can’t call each other.
*	d The code prints the following:
	protected
	private
	public
	e The code prints the following:
	public
	private
	protected

Q3-10.Select the incorrect options:

*	a If a user defines a private constructor for a public class, Java creates a public
	default constructor for the class.
	b A class that gets a default constructor doesn’t have overloaded constructors.
*	c A user can overload the default constructor of a class.
	d The following class is eligible for a default constructor:
	class EJava {}
	e The following class is also eligible for a default constructor:
	class EJava {
	void EJava() {}
	}